#!/usr/bin/env python

import argparse
import logging
import os
import shutil
import subprocess
import platform
import tempfile

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(message)s')
_log = logging.getLogger()

learning_task_dir_name = 'learningtasks'
prolog_dir_name = 'prolog'
data_dir_name = 'data'
tool_specific_data_dir = 'golem'
lp_dir_name = 'lp'
pos_file_name = 'pos.pl'
neg_file_name = 'neg.pl'
output_file_name = 'results.txt'
exec_file_name = 'golem'


def find_golem():
    gen_path = os.path.join(os.getcwd(),
                            '%s-%s' % (platform.system(), platform.machine()),
                            exec_file_name)

    if os.path.isfile(gen_path):
        # golem executable resides in the same directory
        return gen_path

    else:
        # golem executable resides somewhere else; it is assumed that it can be
        # found somewhere in the system path
        return exec_file_name


def copy_files_around(task_id, lp_id, target_dir, file_name_base):
    """Finds all the files necessary to run golem:
    - ../../../learningtasks/<task_id>/prolog/data/*.pl  # merged!
                            --> <target_dir>/<file_name_base>.b
    - ../../learningtasks/<task_id>/prolog/lp/<lp_id>/pos.pl
                            --> <target_dir>/<file_name_base>.f
    - ../../learningtasks/<task_id>/prolog/lp/<lp_id>/neg.pl
                            --> <target_dir>/<file_name_base>.n
    """
    # <file_name_base>.b (background knowledge)
    data_dir = os.path.join('..', '..', learning_task_dir_name, task_id,
                            prolog_dir_name, data_dir_name)
    tool_specific_dir = os.path.join(
        '..', '..', learning_task_dir_name, task_id, prolog_dir_name,
        data_dir_name, tool_specific_data_dir)

    # merge all kb files into one
    with open(os.path.join(target_dir, file_name_base+'.b'), 'w') as out:
        if os.path.isdir(tool_specific_dir):
            for f_name in os.listdir(tool_specific_dir):
                if f_name.endswith('.pl'):
                    subprocess.call(['cat', f_name], cwd=tool_specific_dir,
                                    stdout=out)
        for f_name in os.listdir(data_dir):
            if f_name.endswith('.pl'):
                subprocess.call(['cat', f_name], cwd=data_dir, stdout=out)

    pos_file_path = os.path.join('..', '..', learning_task_dir_name, task_id,
                                 prolog_dir_name, lp_dir_name, lp_id,
                                 pos_file_name)
    pos_target_file_path = os.path.join(target_dir, file_name_base+'.f')
    subprocess.call(['cp', pos_file_path, pos_target_file_path])

    neg_file_path = os.path.join('..', '..', learning_task_dir_name, task_id,
                                 prolog_dir_name, lp_dir_name, lp_id,
                                 neg_file_name)
    neg_target_file = os.path.join(target_dir, file_name_base+'.n')
    subprocess.call(['cp', neg_file_path, neg_target_file])


def get_and_clean_results(results_dir, f_name_base):
    result_lines = []
    # get all result lines from results file
    with open(os.path.join(results_dir, f_name_base + '.r')) as res:
        for line in res.readlines():
            result_lines.append(line.strip())

    # FIXME: This split-at-').'-and-join-again approach is too weak
    # remove all line breaks and spit again one rule per line
    result_lines = ''.join(result_lines).split(').')
    # add dots (removed in previous line) to rules again
    result_lines = [l + ').' for l in result_lines if l != '']

    # remove all pos examples that could not be generalized
    with open(os.path.join(target_dir, f_name_base + '.f')) as examples:
        for line in examples.readlines():
            line = line.strip()
            if line in result_lines:
                result_lines.remove(line)

    return result_lines


def clean_up(tmp_dir):
    shutil.rmtree(tmp_dir)


if __name__ == '__main__':
    argparser = argparse.ArgumentParser()
    argparser.add_argument('learning_task')
    argparser.add_argument('learning_problem')
    argparser.add_argument('result_output_file')
    args = argparser.parse_args()

    learning_task_id = args.learning_task
    learning_problem_id = args.learning_problem
    output_file = args.result_output_file
    _log.debug('Running learning task %s with learning problem %s' % (
        learning_task_id, learning_problem_id))

    file_name_base = learning_task_id + '_' + learning_problem_id
    target_dir = tempfile.mkdtemp()
    _log.debug('Target dir is %s' % target_dir)

    copy_files_around(learning_task_id, learning_problem_id, target_dir,
                      file_name_base)

    golem_executable = find_golem()
    _log.debug('Runnig Golem')
    subprocess.check_call([golem_executable, file_name_base], cwd=target_dir)

    results = get_and_clean_results(target_dir, file_name_base)

    with open(output_file, 'w') as out:
        for line in results:
            out.write(line + "\n")

    _log.debug('Golem run finished. Cleaning up.')
    clean_up(target_dir)
    _log.debug('Done. Results written to %s' % output_file)
