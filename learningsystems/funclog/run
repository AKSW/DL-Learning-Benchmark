#!/usr/bin/env python

import argparse

try:
    import configparser
except ImportError:
    import ConfigParser as configparser

import logging
import os
import stat
import subprocess

import platform
import sys
import atexit
import signal
import ctypes
libc = ctypes.CDLL("libc.so.6")


def set_pdeathsig(sig = signal.SIGTERM):
    def callable():
        return libc.prctl(1, sig)
    return callable

procs = []

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(message)s')
_log = logging.getLogger()


@atexit.register
def kill_subprocesses(*args, **kwargs):
    for proc in procs:
        if proc.returncode == None:
            _log.debug('killing %s at exit', proc)
        try:
            proc.kill()
            proc.terminate()
        except:
            pass

def sig_term(*args, **kwargs):
#    kill_subprocesses()
    sys.exit(signal.SIGTERM | 0x80)

signal.signal(signal.SIGTERM, sig_term)

def check_call_and_terminate(*args, **kwargs):
    pp = subprocess.Popen(*args, **kwargs)
    procs.append(pp)
    retcode = pp.wait()
    if retcode:
        raise subprocess.CalledProcessError(retcode, args[0])
    return retcode

learning_task_dir_name = 'learningtasks'
prolog_dir_name = 'prolog'
data_dir_name = 'data'
tool_specific_data_dir = 'funclog'
lp_dir_name = 'lp'
config_file_name = 'funclog.conf'
output_file_name = 'results.txt'
yap_executable_name = 'yap'
gilps_script_name = 'gilps.pl'
funclog_rules_output_file_name = 'rules'
pos_example_pattern = 'example(%s,1).'
neg_example_pattern = 'example(%s,-1).'
train_script_file_name = 'train.pl'
train_script_file_template = """#!%(yap)s -L --

:- use_module(library(lists), [member/2, memberchk/2, reverse/2, append/3, intersection/3]).
:- use_module('%(gilps_script)s', [read_problem/1, build_theory/0, modeh/1, modeh/2, modeb/2, modeb/3, set/2]).

:-
%(settings)s
    read_problem('%(bg_kb_file)s'),
    build_theory,
    halt.
:- halt(1).
"""


class NoYapInstallationFoundException(Exception):
    """Raised when no installed Yap could be found."""


class NoGILPSScriptFound(Exception):
    """Raised when no GILPS script could be found"""


class NotAHeadOutputConnectedProblem(Exception):
    """
    FuncLog only works on HOC learning problems. This exception is raised
    whenever it is called on non-HOC problems
    """


def copy_files_and_create_examples(task_id, lp_id, target_dir, file_name_base,
                                   file_pos, file_neg):
    """Finds all the files necessary to run FuncLog:
    - ../../learningtasks/<task_id>/prolog/data/funclog/*.pl  # merged!
                            --> <target_dir>/<file_name_base>.pl
    - file_pos              --> <target_dir>/<file_name_base>.pl
    - file_neg              --> <target_dir>/<file_name_base>.pl
    - ../../learningtasks/<task_id>/prolog/data/*.pl  # merged!
                            --> <target_dir>/<file_name_base>.b
    """
    # install yap startup.yss if present
    gen_path = os.path.join(os.getcwd(),
                            '%s-%s' % (platform.system(), platform.machine()),
                            'startup.yss')
    if os.path.isfile(gen_path):
        # yap startup file resides in the same directory
        subprocess.call(['cp', gen_path, os.path.join(target_dir, 'startup.yss')])

    with open(os.path.join(target_dir, file_name_base+'.pl'), 'w') as out:

        # ../../learningtasks/<task_id>/prolog/data/funclog/*.pl  # merged!
        #       --> <target_dir>/<file_name_base>.pl
        tool_specific_dir = os.path.join(
            '..', '..', learning_task_dir_name, task_id, prolog_dir_name,
            data_dir_name, tool_specific_data_dir)

        if os.path.isdir(tool_specific_dir):
            for f_name in os.listdir(tool_specific_dir):
                if f_name.endswith('.pl'):
                    subprocess.call(['cat', f_name], cwd=tool_specific_dir,
                                    stdout=out)

        # file_pos --> <target_dir>/<file_name_base>.pl
        with open(file_pos) as posfile:
            for line in posfile:
                # example(active(d190), 1).
                line = line.strip()[:-1]  # remove trailing dot
                example_line = pos_example_pattern % line
                out.write(example_line + os.linesep)

        # file_neg --> <target_dir>/<filename_base>.pl
        if os.path.isfile(file_neg):
            with open(file_neg) as negfile:
                for line in negfile:
                    # example(active(d190), -1).
                    line = line.strip()[:-1]  # remove trailing dot
                    example_line = neg_example_pattern % line
                    out.write(example_line + os.linesep)
        out.flush()

        # ../../learningtasks/<task_id>/prolog/data/*.pl  # merged!
        #       --> <target_dir>/<file_name_base>.b
        data_dir = os.path.join('..', '..', learning_task_dir_name, task_id,
                                prolog_dir_name, data_dir_name)

        for f_name in os.listdir(data_dir):
            if f_name.endswith('.pl'):
                subprocess.call(['cat', f_name], cwd=data_dir, stdout=out)

    return


def find_yap():
    gen_path = os.path.join(os.getcwd(),
                            '%s-%s' % (platform.system(), platform.machine()),
                            yap_executable_name)

    if os.path.isfile(gen_path):
        # yap executable resides in the same directory
        return gen_path

    else:
        yap_exec_path = subprocess.check_output(['which', yap_executable_name])
        yap_exec_path = yap_exec_path.strip()

        if yap_exec_path == '':
            msg = 'No Yap installation could be found. Please make sure you ' \
                  'have Yap installed via your package manager or download ' \
                  'and manually install it ' \
                  'from https://www.dcc.fc.up.pt/~vsc/Yap/'
            raise NoYapInstallationFoundException(msg)

        return yap_exec_path


def find_gilps_script():
    if os.path.isfile(os.path.join(os.getcwd(), gilps_script_name)):
        # gilps script resides in the same directory
        return os.path.join(os.getcwd(), gilps_script_name)

    elif os.path.isfile(os.path.join(os.getcwd(), 'source', gilps_script_name)):
        # gilps script resides in ./source/
        return os.path.join(os.getcwd(), 'source', gilps_script_name)

    else:
        try:
            gilps_script_path = subprocess.check_output(
                ['locate', gilps_script_name])

        except subprocess.CalledProcessError:
            gilps_script_path = ''

        if gilps_script_path == '':
            msg = 'No gilps.pl script could be found. Please download it ' \
                  'from http://www.doc.ic.ac.uk/~jcs06/GILPS/GILPS.tar.bz2 ' \
                  'and put it into the learning system\'s directory'
            raise NoGILPSScriptFound(msg)

        return gilps_script_name


def get_settings(learning_task, lp_id, cfg):
    config_file_path = os.path.join('..', '..', learning_task_dir_name,
                                    learning_task, prolog_dir_name,
                                    lp_dir_name, lp_id, config_file_name)

    settings = {}

    if os.path.isfile(config_file_path):
        conf = configparser.ConfigParser()
        conf.read(config_file_path)

        for item in conf.items('main'):
            setting, raw_value = item
            settings[setting] = raw_value

    for k, v in cfg.items():
        if k.startswith('settings'):
            # 'settings.caching' --> 'caching'
            k = k.split('.', 1)[1]
            settings[k] = v

    return settings


def create_pl_script(yap_executable, gilps_script_path, out_dir, kb_file_path,
                     settings):
    settings_str = ''

    for option, val in settings.items():
        settings_str += '    set(%s, %s),' % (option, val)
        settings_str += os.linesep

    # mapping for filling the train script template
    m = {
        'yap': yap_executable,
        'gilps_script': gilps_script_path,
        'bg_kb_file': kb_file_path,
        'settings': settings_str,
    }

    # write the train script
    script_path = os.path.join(out_dir, train_script_file_name)
    with open(script_path, 'w') as f:
        f.write(train_script_file_template % m)

    # make the train script executable
    os.chmod(script_path, stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR)

    return


def get_and_clean_results(results_dir):
    result_lines = []
    # get all result lines from results file
    with open(os.path.join(results_dir, funclog_rules_output_file_name)) as res:
        for line in res.readlines():
            result_lines.append(line.strip())

    # result lines should be something like this:
    # [
    #   'theory_clause([class(A,fish),has_gills(A)],[class(+animal,#class),has_gills(+animal)]).',
    #   'theory_clause([class(A,mammal),has_milk(A)],[class(+animal,#class),has_milk(+animal)]).',
    #   'theory_clause([class(A,reptile),has_legs(A,4),has_eggs(A)],[class(+animal,#class),has_legs(+animal,#nat),has_eggs(+animal)]).',
    #   'theory_clause([class(A,bird),has_covering(A,feathers)],[class(+animal,#class),has_covering(+animal,#covering)]).',
    #   'theory_clause([class(A,reptile),habitat(A,land),has_covering(A,scales)],[class(+animal,#class),habitat(+animal,#habitat),has_covering(+animal,#covering)]).'
    # ]

    rules = []
    for line in result_lines:
        start = line.find('([') + 2
        end = line.rfind('],[')
        rule = line[start:end]
        rules.append(rule)

    return rules


def read_config(path):
    conf = configparser.ConfigParser()
    conf.read(path)

    settings = {}
    for item in conf.items('main'):
        setting, raw_value = item
        settings[setting] = raw_value

    for item in conf.items('filename'):
        setting, raw_value = item
        settings['filename.'+setting] = raw_value

    for item in conf.items('settings'):
        setting, raw_value = item
        settings['settings.'+setting] = raw_value

    return settings


if __name__ == '__main__':
    argparser = argparse.ArgumentParser()
    argparser.add_argument('config_file')
    args = argparser.parse_args()

    cfg = read_config(args.config_file)

    learning_task_id = cfg['learningtask']
    learning_problem_id = cfg['learningproblem']
    output_file = cfg['filename.output']
    _log.debug('Running learning task %s with learning problem %s' % (
        learning_task_id, learning_problem_id))

    file_name_base = learning_task_id + '_' + learning_problem_id
    target_dir = cfg['filename.workdir']
    _log.debug('Target dir is %s' % target_dir)

    copy_files_and_create_examples(learning_task_id, learning_problem_id,
                                   target_dir, file_name_base,
                                   cfg['filename.pos'], cfg['filename.neg'])

    yap_executable = find_yap()
    gilps_script_path = find_gilps_script()
    settings = get_settings(learning_task_id, learning_problem_id, cfg)
    settings['output_theory_file'] = funclog_rules_output_file_name
    settings['engine'] = 'funclog'
    # add set(clause_evaluation, left_to_right) since this is the only
    # supported clause evaluation mode
    settings['clause_evaluation'] = 'left_to_right'
    # _log.debug('settings: %s' % settings)

    create_pl_script(yap_executable, gilps_script_path, target_dir,
                     file_name_base + '.pl', settings)
    script_path = os.path.join(target_dir, train_script_file_name)

    _log.debug('Runnig FuncLog')
    check_call_and_terminate([script_path], cwd=target_dir)

    results = get_and_clean_results(target_dir)

    with open(output_file, 'w') as out:
        for line in results:
            out.write(line + os.linesep)

    _log.debug('FuncLog run finished.')
    _log.debug('Results written to %s' % output_file)
